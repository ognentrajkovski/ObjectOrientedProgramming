/*Да се дефинира класа Vozac во која се чуваат информации за:

име (низа од максимум 100 знаци)
возраст (цел број)
број на трки (цел број)
дали е ветеран (да/не).
Да се преоптоварат:

операторот << за печатење кој ќе ги печати името, возраст, бројот на трки и дали е ветеран (се печати VETERAN)
операторот == за споредување на два возачи според заработувачката по трка.
Од оваа класа да се изведат две нови класи Avtomobilist и Motociklist.

За автомобилистот дополнително се чува:

цена на автомобилот (децимален број).
За мотоциклистот дополнително се чува:

моќност на мотор (цел број).
Заработувачката по трка на возачите се пресметува како:

за автомобилостот заработувачката по трка е $\frac{CENA_{AVTOMOBIL}}{5}$
за мотоциклистот заработувачката по трка е $MOKJNOST_NA_MOTOR * 20$
Секој автомобилист плаќа данок на заработка. Да се напишат соодветни методи за пресметување данок:

за автомобилисти: ако бројот на трки е поголем од 10 стапката на данок е 15% од заработката, инаку 10% од заработката.
за мотоциклисти: ако е ветеран стапката на данок е 25% од заработката, инаку 20% од заработката.
Да се напше надворешна функција soIstaZarabotuvachka која како аргументи прима низа од покажувачи од класата Vocac, нивниот број, како и покажувач кон ојбект од возач и враќа како резултат бројот на возачи кои имаат иста заработувачка по трка со проследениот возач.*/

#include <iostream>
#include <cstring>
using namespace std;

class Vozac{
protected:
    char ime[100];
    int vozrast;
    int trki;
    bool vet;
public:
    virtual float danok() = 0;
    virtual float zarabotuvacka() = 0;
    Vozac(char * ime = "a", int vozrast = 0, int trki = 0, bool vet = 0){
        strcpy(this->ime, ime);
        this->vozrast = vozrast;
        this->trki = trki;
        this->vet = vet;
    }
    Vozac(const Vozac &v){
        strcpy(this->ime, v.ime);
        this->vozrast = v.vozrast;
        this->trki = v.trki;
        this->vet = v.vet;
    }
    friend ostream & operator<<(ostream &o, const Vozac &v){
        if(v.vet == true)
            return o << v.ime << "\n" << v.vozrast << "\n" << v.trki  << "\n" << "VETERAN" << endl;
        else
            return o << v.ime << "\n" << v.vozrast << "\n" << v.trki << endl;
    }
    friend bool operator==(const Vozac &v1, const Vozac &v2){

    }
    
};

class Avtomobilist : public Vozac {
private:
    float cena_avto;
public:
    float danok(){
        if(trki > 10)
            return zarabotuvacka()*0.15;
        return zarabotuvacka()*0.1;
    }
    Avtomobilist(char * ime = "a", int vozrast = 0, int trki = 0, bool vet = 0, float cena_avto = 0) : Vozac(ime, vozrast, trki, vet){
        this->cena_avto = cena_avto;
    }
    Avtomobilist(const Avtomobilist &a) : Vozac(a){
        this->cena_avto = a.cena_avto;
    }
    friend ostream & operator<<(ostream &o, const Avtomobilist & a){
        if(a.vet == true)
            return o << a.ime << "\n"<< a.vozrast << "\n" << a.trki << "\n" << "VETERAN" << endl;
        else
            return o << a.ime << "\n"<< a.vozrast << "\n" << a.trki <<  endl;
    }
    friend bool operator==(const Avtomobilist &a1, const Avtomobilist &a2){

    }
    float zarabotuvacka(){
        return cena_avto/5;
    }
};

class Motociklist : public Vozac{
private:
    int mokjnost;
public:
    float danok(){
        if(vet==1)
            return zarabotuvacka()*0.25;
        return zarabotuvacka()*0.2;

    }
    Motociklist(char * ime = "a", int vozrast = 0, int trki = 0, bool vet = 0, int mokjnost = 0) : Vozac(ime, vozrast, trki, vet){
        this->mokjnost = mokjnost;
    }
    Motociklist(const Motociklist & m) : Vozac(m){
        this->mokjnost = m.mokjnost;
    }
    friend ostream & operator<<(ostream &o, const Motociklist &m){
        if(m.vet == true)
            return o << m.ime << "\n" << m.vozrast << "\n" << m.trki << "\n" << "VETERAN" << endl;
        else
            return o << m.ime << "\n" << m.vozrast << "\n" << m.trki <<  endl;
    }
    friend bool operator==(const Motociklist &m1, const Motociklist &m2){

    }
    float zarabotuvacka(){
        return (float)mokjnost*20;
    }
};
int  soIstaZarabotuvachka(Vozac** v, int n, Vozac *vx){
    int counter = 0;
    for(int i = 0; i < n; i++){
            if(vx->zarabotuvacka() == v[i]->zarabotuvacka())
                counter++;
    }
    return counter;
}

int main() {
    int n, x;
    cin >> n >> x;
    Vozac **v = new Vozac*[n];
    char ime[100];
    int vozrast;
    int trki;
    bool vet;
    for(int i = 0; i < n; ++i) {
        cin >> ime >> vozrast >> trki >> vet;
        if(i < x) {
            float cena_avto;
            cin >> cena_avto;
            v[i] = new Avtomobilist(ime, vozrast, trki, vet, cena_avto);
        } else {
            int mokjnost;
            cin >> mokjnost;
            v[i] = new Motociklist(ime, vozrast, trki, vet, mokjnost);
        }
    }
    cout << "=== DANOK ===" << endl;
    for(int i = 0; i < n; ++i) {
        cout << *v[i];
        cout << v[i]->danok() << endl;
    }
    cin >> ime >> vozrast >> trki >> vet;
    int mokjnost;
    cin >> mokjnost;
    Vozac *vx = new Motociklist(ime, vozrast, trki, vet, mokjnost);
    cout << "=== VOZAC X ===" << endl;
    cout << *vx;
    cout << "=== SO ISTA ZARABOTUVACKA KAKO VOZAC X ===" << endl;
    cout << soIstaZarabotuvachka(v, n, vx);
    for(int i = 0; i < n; ++i) {
        delete v[i];
    }
    delete [] v;
    delete vx;
    return 0;
}
